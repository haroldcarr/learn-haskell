#+TITLE:     Programming and Math
#+AUTHOR:    Harold Carr
#+DATE:      LambdaConf 2015-05-23
#+DESCRIPTION: Material from Program Design by Calculation by Oliveira presentated at LambdaConf 2015
#+KEYWORDS:  beamer org orgmode
#+LANGUAGE:  en
#+PROPERTY:  tangle lc.hs

#+STARTUP: beamer
#+STARTUP: oddeven
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [17pt]
#+BEAMER_THEME: default

#+OPTIONS:   H:1 toc:nil
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

#+BEGIN_COMMENT
# HC
#+Latex_Header: \definecolor{fore}{RGB}{249,242,215}
#+Latex_Header: \definecolor{back}{RGB}{51,51,51}
#+Latex_Header: \definecolor{title}{RGB}{255,0,90}
#+Latex_Header: \setbeamercolor{normal text}{fg=fore}
#+Latex_Header: \setbeamercolor{normal text}{bg=back}
#+Latex_Header: \setbeamercolor{titlelike}{fg=title}
#+END_COMMENT

# HC : get rid of navigation
#+Latex_Header: \beamertemplatenavigationsymbolsempty

# ------------------------------------------------------------------------------
* credits

#+begin_center
Harold Carr\\
@haroldcarr\\
[[harold.carr@gmail.com]]\\
\vspace{0.9in}
/Program Design by Calculation/ \\
J. N. Oliveira\\
[[http://www4.di.uminho.pt/~jno/][http://www4.di.uminho.pt/~jno/]]
#+end_center

# ------------------------------------------------------------------------------
* function definition

*math*
#+begin_latex
\[ f(n) = \left\{
  \begin{array}{l l}
    1               & \quad \text{if $n = 0$}\\
    f(n-1) \times n & \quad \text{if $n > 0$}
  \end{array} \right. \]
#+end_latex

*haskell*
#+begin_src haskell
f :: Integer -> Integer
f 0 = 1
f n = f (n - 1) * n
#+end_src

# ------------------------------------------------------------------------------
* function application

*math*
#+begin_latex
\[ f(5) \]
#+end_latex

*haskell*
#+begin_src haskell
f 5
#+end_src

# ------------------------------------------------------------------------------
* function definition/application

example *Factorial.hs*

# ------------------------------------------------------------------------------
* function composition (1/3)

#+ATTR_LaTeX: :width 2in
[[file:../function-composition.png]]

# ------------------------------------------------------------------------------
* function composition (2/3)

**                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
*math*
\[ f \circ g \]
\[ f(g(x)) \]

*haskell*
#+BEGIN_EXAMPLE
(.) :: (b -> c) -> (a -> b) -> a -> c
(.) f g = \x -> f (g x)
#+END_EXAMPLE

**                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+ATTR_LaTeX: :width 1.5in
[[file:../function-composition.png]]

# ------------------------------------------------------------------------------
* function composition (3/3)

example *Composition.hs*

# ------------------------------------------------------------------------------
* purity viz application/composition

example *CompositionVizPurity.java*

\vspace{0.2in}

example *CompositionVizPurity.hs*

# ------------------------------------------------------------------------------
* composition is associative

\hspace{1in} $(f \circ g) \circ h = f \circ (g \circ h)$

Similar to $(a + b) + c = a + (b + c)$

[[file:../function-composition-associative.png]]

# ------------------------------------------------------------------------------
* identity function(s) (1/2)

=id :: a -> a=\\
=id x = x=

does not lose any information

/unit/ of composition : $f \circ id = id \circ f = f$

similar to \hspace{4.5em} $n + 0 = 0 + n = n$

#+ATTR_LaTeX: :width 1.5in
[[file:../function-composition-id-is-unit.png]]

# ------------------------------------------------------------------------------
* identity function(s) (2/2)

example *Identity.hs*

# ------------------------------------------------------------------------------
* constant function(s)

#+BEGIN_SRC haskell
const     :: a -> b -> a
const x _ =  x
#+END_SRC

loses all information (i.e., ignores arg)

#+BEGIN_SRC haskell
c :: a -> Char
c  = const 'c'
#+END_SRC

example *Const.hs*

# ------------------------------------------------------------------------------
* id/const functions are limit points

=id= preserves all information\\
\vspace{0.1in}
=const= loses all information\\
\vspace{0.1in}
others functions lose info\\
\vspace{0.1in}
functional programming:
- transforming or losing info to fit context

# ------------------------------------------------------------------------------
* constant-fusion

=constantFusion :: (a->b) -> a -> c=\\
=constantFusion f = c . f=

- input to =f= can be any type
- result of =f= can be any type
- ignores result of =f=
- output of constant-fusion not (necessarily) type related to co/domain of =f=

example *ConstantFusion.hs*

# ------------------------------------------------------------------------------
* isomorphisms \hspace{5em} $A \cong B$

Given             \hspace{4em} $f : A \rightarrow B$,\\
$f$ has /inverse/ \hspace{0.5em} $f^{\circ} : B \rightarrow A$,\\
such that         \hspace{2em} $f \circ f^{\circ} = id_b \wedge f^{\circ} \circ f = id_a$ \\
\vspace{0.1in}
isomorphisms convert between "formats" without losing info\\
\vspace{0.1in}
isomorphic domains regarded as "abstractly" the same\\
\vspace{0.1in}
example *Isomorphisms.hs*

# ------------------------------------------------------------------------------
* products : gluing uncomposable funs
<<products>>

cartesian product of types

#+BEGIN_SRC haskell
pair :: (c -> a) -> (c -> b)
        -> c     -> (a, b)
pair f g c = (f c, g c)
#+END_SRC

$\langle f,g \rangle : C \rightarrow A \times B$ \\
$\langle f,g \rangle c = (f \hspace{0.25em} c, g \hspace{0.25em} c)$ \\
\vspace{0.1in}
example *Products.hs* \hspace{3em} \fontsize{11pt}{11.5}\selectfont ([[coproducts][goto coproducts]])

# ------------------------------------------------------------------------------
* $\times$-cancellation
<<product-cancellation>>
[[file:../pair.png]]

#+BEGIN_EXAMPLE
fst (1,2)  =>  1
snd (1,2)  =>  2
#+END_EXAMPLE

\hspace{3em} \fontsize{11pt}{11.5}\selectfont ([[sum-cancellation][goto $+$ cancellation]])

# ------------------------------------------------------------------------------
* $\times$ of two functions
<<product-of-two-functions>>
when domains nor ranges do not coincide\\
\vspace{0.1in}
$f \times g = \langle f \circ fst, g \circ snd \rangle$ \\
\vspace{0.1in}
[[file:../product.png]]

example *Product.hs* \fontsize{11pt}{11.5}\selectfont ([[sum-of-two-functions][goto $+$ of two funs]])

# ------------------------------------------------------------------------------
* $\times$-fusion $\langle g,h \rangle \circ f = \langle g \circ f, h \circ f \rangle$
<<product-fusion>>
example *ProductFusion.hs* \fontsize{11pt}{11.5}\selectfont ([[sum-fusion][goto $+$-fusion]])

Pair : right-distributive with rspt to $\circ$

#+ATTR_LaTeX: :width 3in
[[file:../product-fusion.png]]

# ------------------------------------------------------------------------------
* $\times$-absorption (1/3)

left-distributivity does not hold but

for $f \circ \langle g,h \rangle$ when $f = i \times j$ :
$(i \times j) \circ \langle g,h \rangle = \langle i \circ g,j \circ h \rangle$

|                |   | $(i \times j) \circ \langle g,h \rangle$                                                           |
| $\times$ 2 $f$ | = | $\langle i \circ fst, j \circ snd \rangle \circ \langle g,h \rangle$                               |
| $\times$-fus   | = | $\langle (i \circ fst) \circ \langle g, h \rangle,(j \circ snd) \circ \langle g,h \rangle \rangle$ |
| $\circ$ ass    | = | $\langle i \circ (fst \circ \langle g, h \rangle),j \circ (snd \circ \langle g,h \rangle) \rangle$ |
| $\times$-can   | = | $\langle i \circ g,j \circ h \rangle$                                                              |

# ------------------------------------------------------------------------------
* $\times$-absorption (just derived) (2/3)
<<product-absorption>>

#+ATTR_LaTeX: :width 3.5in
[[file:../product-absorption.png]]

\fontsize{11pt}{11.5}\selectfont ([[sum-absorption][goto $+$-absorption]])

# ------------------------------------------------------------------------------
* $\times$-absorption (3/3)

example *ProductAbsorption.hs*

# ------------------------------------------------------------------------------
* $\times$ and projections

previous diagram shows\\
\vspace{0.2in}
$i \circ fst = fst \circ (i \times j)$
- given $D \times E$ no need to evaluate $j$
$j \circ snd = snd \circ (i \times j)$
- given $D \times E$ no need to evaluate $i$ \\
\vspace{0.2in}
example *ProductAndProjections.hs*

# ------------------------------------------------------------------------------
* functorial properties of $\times$
<<product-functor>> <<product-functor-id>>
$\times$-functor : $(g \circ h) \times (i \circ j) = (g \times i) \circ (h \times j)$
- bi-distribution of $\times$ with respect to $\circ$
- example *ProductFunctor.hs* \fontsize{11pt}{11.5}\selectfont ([[sum-functor][goto $+$-functor]])

$\times$-functor-id : $id_A \times id_B = id_{A \times B}$

#+BEGIN_EXAMPLE
product id id ("x", 'y') => ("x", 'y')
        id    ("x", 'y') => ("x", 'y')
#+END_EXAMPLE

\fontsize{11pt}{11.5}\selectfont ([[sum-functor-id][goto $+$-functor-id]])


# ------------------------------------------------------------------------------
* $\times$-reflexion : $\langle fst,snd \rangle = id_{A \times B}$
<<product-reflexion>>
[[file:../product-reflexion.png]]

#+BEGIN_EXAMPLE
pair fst snd ("x", 'y') => ("x", 'y')
id           ("x", 'y') => ("x", 'y')
#+END_EXAMPLE

\fontsize{11pt}{11.5}\selectfont ([[sum-reflexion][goto $+$-reflexion]])

# ------------------------------------------------------------------------------
* $\times$ is commutative : $A \times B \cong B \times A$

\fontsize{15.5pt}{16}\selectfont

$\langle snd,fst \rangle = swap$

|                    |   | $swap \circ swap$                                                                      |
| def swap           | = | $\langle snd,fst \rangle \circ swap$                                                   |
| $\times$-fusion    | = | $\langle snd \circ swap,fst \circ swap \rangle$                                        |
| def swap           | = | $\langle snd \circ \langle snd,fst \rangle, fst \circ \langle snd,fst \rangle \rangle$ |
| $\times$-cancel    | = | $\langle fst,snd \rangle$                                                              |
| $\times$-reflexion | = | $id$                                                                                   |

Therefore, no information is lost (or gained) when swapping fields in record datatypes.

# ------------------------------------------------------------------------------
* $\times$ is associative (1/2) \hspace{2em} exercise

given

#+BEGIN_EXAMPLE
al :: (a, (b, c)) -> ((a,  b),c)
ar :: ((a, b),c)  ->  (a, (b, c))
#+END_EXAMPLE

prove $A \times (B \times C) \cong (A \times B) \times C$

\fontsize{15.5pt}{16}\selectfont

#+BEGIN_EXAMPLE
(ar . al) ('a',('b','c')) => ('a',('b','c'))
id        ('a',('b','c')) => ('a',('b','c'))
#+END_EXAMPLE

# ------------------------------------------------------------------------------
* $\times$ is associative (2/2) \hspace{2em} proof

\fontsize{11pt}{11.5}\selectfont

$al = \langle \langle fst, fst \circ snd \rangle, snd \circ snd \rangle$ \\
$ar = \langle fst \circ fst, \langle snd \circ fst, snd \rangle \rangle$

|              | = | $(ar \circ al) (a, (b, c))$                                                                                    |
| al def       | = | $(ar \circ \langle \langle fst      ,  fst \circ snd \rangle            ,  snd \circ snd \rangle) (a, (b, c))$ |
| pair def     | = | $(ar \circ (       \langle fst      ,  fst \circ snd \rangle (a, (b, c)), (snd \circ snd) (a, (b, c))   )$     |
| $\times$-can | = | $(ar \circ (       \langle fst      ,  fst \circ snd \rangle (a, (b, c)),                         c     )$     |
| pair def     | = | $(ar \circ (        (fst (a, (b, c)), (fst \circ snd) (a, (b, c)) ),                              c     )$     |
| $\times$-can | = | $(ar \circ (        (     a         ,                      b      ),                              c     )$     |
|              | = | ...                                                                                                            |
|              | = | $(a, (b, c))$                                                                                                  |

# ------------------------------------------------------------------------------
* coproducts : gluing un $\circ$ funs (1/2)
<<coproducts>>

/coproduct/ of $A$ and $B$ is /disjoint union/ : values labeled with
=Left= or =Right= to indicate the value came from $A$ or $B$

#+begin_center
$[f,g] : A + B \rightarrow C$
#+end_center

#+begin_latex
\[ [f,g] x = \left\{
  \begin{array}{l l}
    f(a)            & \quad \text{if $x = Left$   $a$}\\
    g(b)            & \quad \text{if $x = Right$  $b$}
  \end{array} \right. \]
#+end_latex

\fontsize{11pt}{11.5}\selectfont ([[products][goto products]])

# ------------------------------------------------------------------------------
* coproducts (2/2)

[[file:../either.png]]

example *Either.hs*

# ------------------------------------------------------------------------------
* /product/ and /coproduct/ are /dual/

Duality means
- everything said about
  - product $A \times B$
- can be rephrased to
  - coproduct $A + B$.

e.g., : sum of two functions =f + g= \\
\hspace{0.5em} is dual of \\
\hspace{1em} product of two functions =f × g=

# ------------------------------------------------------------------------------
* $+$ of two functions
<<sum-of-two-functions>>
$f + g = [Left \circ f, Right \circ g]$

file:../sum.png

example *Sum.hs* \fontsize{11pt}{11.5}\selectfont ([[product-of-two-functions][goto $\times$ of two funs]])

# ------------------------------------------------------------------------------
* $+$-cancellation
<<sum-cancellation>>
$[g,h] \circ Left = g$ \\
\vspace{0.1in}
$[g,h] \circ Right = h$

[[file:../sum-cancellation.png]]

# TODO : diagram using =Left/Right=

example *SumCancellation.hs* \fontsize{11pt}{11.5}\selectfont ([[product-cancellation][goto $\times$ cancellation]])

# ------------------------------------------------------------------------------
* $+$-reflexion
<<sum-reflexion>>
$[ Left, Right ] = id_{A + B}$

[[file:../sum-reflexion.png]]

# TODO: diagram with Left/Right

example *SumReflexion.hs* \fontsize{11pt}{11.5}\selectfont ([[product-reflexion][goto $\times$-reflexion]])

# ------------------------------------------------------------------------------
* $+$-fusion
<<sum-fusion>>
$f \circ [ g , h ] = [ f \circ g , f \circ h ]$

#+ATTR_LaTeX: :width 3in
[[file:../sum-fusion.png]]

example *SumFusion.hs*  \fontsize{11pt}{11.5}\selectfont ([[product-fusion][goto $\times$-fusion]])

# ------------------------------------------------------------------------------
* $+$-absorption
<<sum-absorption>>
$[ g , h ] \circ ( i + j ) = [ g \circ i, h \circ j ]$

#+ATTR_LaTeX: :width 3.5in
[[file:../sum-absorption.png]]

example *SumAbsorption.hs* \fontsize{11pt}{11.5}\selectfont ([[product-absorption][goto $\times$-absorption]])

# ------------------------------------------------------------------------------
* $+$-functor (1/2)
<<sum-functor>>
$(g \circ h) + (i \circ j) = (g + i) \circ (h + j)$

[[file:../sum-functor-1m.jpg]]

\fontsize{11pt}{11.5}\selectfont ([[product-functor][goto $\times$-functor]])

# ------------------------------------------------------------------------------
* $+$-functor (2/2)

$(g \circ h) + (i \circ j) = (g + i) \circ (h + j)$

[[file:../sum-functor-2m.png]]

example *SumFunctor.hs*

# ------------------------------------------------------------------------------
* $+$-functor-id
<<sum-functor-id>>
$id_A + id_B = id_{A+B}$

#+BEGIN_SRC haskell
sumFunctorIdLeft, sumFunctorIdRight
       :: Either a b -> Either a b
sumFunctorIdLeft  = sum id id
sumFunctorIdRight = id
#+END_SRC

\fontsize{11pt}{11.5}\selectfont ([[product-functor-id][goto $\times$-functor-id]])

# ------------------------------------------------------------------------------
* mixing products and coproducts

pair/either exchange maps\\
\vspace{0.1in}
coproduct ($A + B$) to \\
\vspace{0.1in}
\hspace{0.5em} product ($A' \times B'$)

\vspace{0.2in}

$[ \langle f , g \rangle , \langle h , k \rangle ] = \langle [ f , h ], [ g , k ] \rangle$

\vspace{0.2in}

example *pairEitherExchange.hs*

# ------------------------------------------------------------------------------
* summary

- purity
- application, composition
- equational reasoning
- patterns of transformations
- /lots/ more in the paper
- [[http://www4.di.uminho.pt/~jno/ps/pdbc_part.pdf]]
- we made it to p. 30/285 (theorem 2.47)

# ------------------------------------------------------------------------------
* slides and code

\fontsize{13pt}{13}\selectfont
[[http://bit.ly/2015-lambda-conf-harold-carr]]

\vspace{0.3in}

\fontsize{6pt}{6}\selectfont
[[https://github.com/haroldcarr/learn-haskell-coq-ml-etc/tree/master/haskell/book/Program_Design_by_Calculation-Oliveira/2015-LambdaConf]]
