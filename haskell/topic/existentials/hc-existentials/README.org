------------------------------------------------------------------------------
DONE

2017-03-arnaud-bailly-understanding-existentials
2018-11-mark-karpov-existential-quantification

------------------------------------------------------------------------------
IN PROGRESS
https://blog.jle.im/entry/practical-dependent-types-in-haskell-2.html

- universal   : caller chooses the type being instanced
                function’s implementation has to accommodate any choice

- existential : function’s implementation chooses the type being instanced
                caller has to accommodate any choice

------------------------------------------------------------------------------
TODO
https://github.com/freckle/guides/blob/master/haskell-best-practices.md

Existentials
Why / when you want to use them:

you have multiple types which satisfy some interface (type class)
AND
you want to be able to add types to the interface without changing some supertype
(i.e. 'open' rather than 'closed')
AND
you want to delay the choice of which function from the interface to apply to the data
(e.g. rather than using existentials for an interface with a single function,
just apply that function, see haskell-antipattern-existential-typeclass)
AND
you want to work with multiple types adhering to this interface
without regard for their original type

------------------------------------------------------------------------------
DONE example of type-aligned sequences
https://medium.com/@jonathangfischoff/existential-quantification-patterns-and-antipatterns-3b7b683b7d71

------------------------------------------------------------------------------
TODO type-aligned sequences
https://stackoverflow.com/a/40199858

------------------------------------------------------------------------------
TODO
https://reasonablypolymorphic.com/existentialization

------------------------------------------------------------------------------
TODO
http://dev.stephendiehl.com/hask/#existential-quantification

------------------------------------------------------------------------------
https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types

a way of 'squashing' a group of types into one, single type

------------------------------------------------------------------------------
https://ocharles.org.uk/blog/guest-posts/2014-12-19-existential-quantification.html

Existential types help model and implement:

abstract data types
ML-style packages
object-oriented programming (see «Existential Objects» in TAPL)
extensible exceptions (Simon Marlow https://simonmar.github.io/bib/papers/ext-exceptions.pdf)
dynamic typing (as in Data.Dynamic)
type-aligned sequences, such as free applicative functors or bind chains

------------------------------------------------------------------------------
https://stackoverflow.com/questions/14299638/existential-vs-universally-quantified-types-in-haskell

- universally quantified types describe things that work the same for any type
- existential types describe things that work with a specific but unknown type

------------------------------------------------------------------------------
https://softwareengineering.stackexchange.com/a/311833/119693
good or bad?


